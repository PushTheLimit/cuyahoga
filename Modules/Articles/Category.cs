using System;
using System.Collections;

using Gentle.Framework;

using Cuyahoga.Core;

namespace Cuyahoga.Modules.Articles
{
	/// <summary>
	/// Summary description for Category.
	/// </summary>
	[TableName("cm_articlecategory")]
	public class Category : Persistent
	{
		[TableColumn("articlecategoryid"), PrimaryKey(AutoGenerated=true), SequenceName("cm_articlecategory_articlecategoryid_seq")]
		private int _id;
		private string _title;
		private string _summary;
		private bool _syndicate;
		private GentleList _articles;

		#region properties

		/// <summary>
		/// Property Id (int)
		/// </summary>
		public int Id
		{
			get { return this._id; }
		}

		/// <summary>
		/// Property Title (string)
		/// </summary>
		[TableColumn("title")]
		public string Title
		{
			get { return this._title; }
			set { this._title = value; }
		}

		/// <summary>
		/// Property Summary (string)
		/// </summary>
		[TableColumn("summary", NotNull=true)]
		public string Summary
		{
			get { return this._summary; }
			set { this._summary = value; }
		}

		/// <summary>
		/// Property Syndicate (bool)
		/// </summary>
		[TableColumn("syndicate")]
		public bool Syndicate
		{
			get { return this._syndicate; }
			set { this._syndicate = value; }
		}

		/// <summary>
		/// Property Articles (IList)
		/// </summary>
		public IList Articles
		{
			get 
			{ 
				if (this._articles == null)
				{
					this._articles = new GentleList(typeof(Article), this);
				}
				return this._articles;  
			}
		}

		#endregion

		/// <summary>
		/// Constructor for a new Category.
		/// </summary>
		/// <param name="title"></param>
		/// <param name="summary"></param>
		/// <param name="syndicate"></param>
		public Category(string title, string summary, bool syndicate) : this(0, title, summary, syndicate)
		{
		}

		/// <summary>
		/// Constructor that Gentle uses to create a Category from the database.
		/// </summary>
		/// <param name="id"></param>
		/// <param name="title"></param>
		/// <param name="summary"></param>
		/// <param name="syndicate"></param>
		public Category(int id, string title, string summary, bool syndicate)
		{
			this._id = id;
			this._title = title;
			this._summary = summary;
			this._syndicate = syndicate;
		}

		/// <summary>
		/// Constructor to create a populated Category.
		/// </summary>
		/// <param name="id"></param>
		public Category(int id)
		{
			this._id = id;
			if (id > 0)
			{
				Broker.Refresh(this);
			}
		}
	}
}
