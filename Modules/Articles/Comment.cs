using System;

using Gentle.Framework;

namespace Cuyahoga.Modules.Articles
{
	/// <summary>
	/// Summary description for Comment.
	/// </summary>
	[TableName("cm_articlecomment")]
	public class Comment : Persistent
	{
		[TableColumn("articlecommentid"), PrimaryKey(AutoGenerated=true), SequenceName("cm_articlecomment_commentid_seq")]
		private int _id;
		[TableColumn("articleid"), ForeignKey("cm_article", "articleid")]
		private int _articleId;
		[TableColumn("userid", NotNull=true, MagicValue=-1)]
		private int _userId;
		private string _commentText;
		private Article _article;
		private Cuyahoga.Core.User _user;

		#region properties

		/// <summary>
		/// Property Id (int)
		/// </summary>
		public int Id
		{
			get { return this._id; }
		}

		/// <summary>
		/// Property Article (Article)
		/// </summary>
		public Article Article
		{
			get 
			{ 
				if (this._article == null && this._articleId > 0)
				{
					Key key = new Key(typeof(Article), true, "Id", this._articleId);
					this._article = Category.Retrieve(typeof(Article), key) as Article;
				}
				return this._article; 
			}
			set 
			{ 
				this._article = value; 
				if (value != null)
				{
					this._articleId = this._article.Id;
				}
			}
		}

		/// <summary>
		/// Property User (Cuyahoga.Core.User)
		/// </summary>
		public Cuyahoga.Core.User User
		{
			get 
			{ 
				if (this._user == null && this._userId > 0)
				{
					this._user = new Cuyahoga.Core.User(this._userId);
				}
				return this._user; 
			}
			set 
			{ 
				this._user = value; 
				if (value != null)
				{
					this._userId = this._user.Id;
				}
			}
		}

		/// <summary>
		/// Property CommentText (string)
		/// </summary>
		[TableColumn("commenttext")]
		public string CommentText
		{
			get { return this._commentText; }
			set { this._commentText = value; }
		}

		#endregion

		/// <summary>
		/// Constructor to create a new Comment.
		/// </summary>
		/// <param name="articleId"></param>
		/// <param name="userId"></param>
		/// <param name="commentText"></param>
		public Comment(int articleId, int userId, string commentText) : this(0, articleId, userId, commentText)
		{
		}

		/// <summary>
		/// Constructor with all persistant fields.
		/// </summary>
		/// <param name="id"></param>
		/// <param name="articleId"></param>
		/// <param name="userId"></param>
		/// <param name="commentText"></param>
		public Comment(int id, int articleId, int userId, string commentText)
		{
			this._id = id;
			this._articleId = articleId;
			this._userId = userId;
			this._commentText = commentText;
		}

		/// <summary>
		/// Constructor to create a populated Comment.
		/// </summary>
		/// <param name="id"></param>
		public Comment(int id)
		{
			this._id = id;
			if (id > 0)
			{
				Broker.Refresh(this);
			}
		}
	}
}
